clear;close all; clc;
%% Tabu search : Travelling salesman problem

% Chabrol Agathe
% Courbot Antoine
% Zahiri Oumaima

rand('state',40);

%% Datas
cities = round(rand(2,10)*20-10);

%random first chemin
chemin = randperm(size(cities,2),size(cities,2));
 
fin = [0;0];
pos = [0;0]; %initial starting point

tlist=zeros(size(cities,2),size(cities,2));
tabuTime = 11;
BestDist = inf;

%% calcul de la distance avec un chemin
distance = calcDist(chemin,cities);
%% calcul des variations du co√ªt avec permutation de (i,j)
perm = Permutation(chemin) ; 

for p=1:200
    
    distance = calcDist(chemin,cities);
    bestDelta= inf;
    
    for j=1:size(perm') %for each permutation.
        % Permutation de 2 termes dans un chemin
        cheminbis = chemin ; 
        p1 = perm(1,j);
        p2 = perm(2,j);
        r1 = cheminbis(p1);
        r2 = cheminbis(p2);
        cheminbis(p2) = r1;
        cheminbis(p1) = r2;
        
        NewDist = calcDist(cheminbis,cities);

        delta = NewDist - distance;
        
        if delta<bestDelta 
            %best result not in tabu list but aspiration criterium 
            if ( tlist(perm(1,j),perm(2,j)) == 0 ) || ( NewDist < BestDist )     
                bestDelta = delta ; 
                IterrateBestPerm = perm(:,j);
                IterrateBestChemin = cheminbis;
            end
        end
    end
    
    % update chemin an tabuList
    tlist(find(tlist~=0)) = tlist(find(tlist~=0)) -1 ;
    chemin = IterrateBestChemin;
    tlist(IterrateBestPerm(1),IterrateBestPerm(2)) = tabuTime ; 
    tlist(IterrateBestPerm(2),IterrateBestPerm(1)) = tabuTime ; 
    %save best ever results
    if distance < BestDist
        BestDist = distance ;
        BestChemin = chemin;
    end 

end
% 
%BestChemin=[4 7 8 6 3 1 5 2];
copycities = [];
for i=1:size(chemin,2)
    copycities(:,i)=cities(:,BestChemin(i));
end
figure()
hold on
plot(0,0,'*k');
plot(copycities(1,:),copycities(2,:),'*r');
plot([0 copycities(1,:) 0],[0 copycities(2,:) 0],'-b');
axis([-12,12 -12,12]);
legend('La position initiale et finale','Les positions des villes', 'Le chemin optimal');
title(sprintf('Le chemin optimal pour un ensemble de %d villes',size(chemin,2)))
hold off,

calcDist(BestChemin,cities)